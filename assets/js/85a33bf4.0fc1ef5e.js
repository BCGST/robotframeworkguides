"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[862],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,y=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(y,i(i({ref:t},u),{},{components:r})):n.createElement(y,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7306:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],s={sidebar_position:0,sidebar_label:"Static Library",title:"Static Library"},l=void 0,c={unversionedId:"extending_robot_framework/static_library",id:"extending_robot_framework/static_library",title:"Static Library",description:"A static library has all of its robot framework keywords defined as python functions.",source:"@site/docs/extending_robot_framework/static_library.md",sourceDirName:"extending_robot_framework",slug:"/extending_robot_framework/static_library",permalink:"/extending_robot_framework/static_library",editUrl:"https://github.com/MarketSquare/robotframeworkguides/docs/extending_robot_framework/static_library.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Static Library",title:"Static Library"},sidebar:"tutorialSidebar",previous:{title:"CI Systems",permalink:"/using_rf_in_ci_systems/ci"},next:{title:"How to contribute",permalink:"/contribute"}},u={},d=[{value:"Static Library With a Class",id:"static-library-with-a-class",level:3},{value:"Static Library withouth a Class",id:"static-library-withouth-a-class",level:3},{value:"Decorators",id:"decorators",level:2},{value:"Examples",id:"examples",level:2}],p={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A static library has all of its robot framework keywords defined as python functions."),(0,o.kt)("h3",{id:"static-library-with-a-class"},"Static Library With a Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class DemoLibrary:\n    def __init__(self, *args, **kwargs):\n        print(f"Sample Library initialized with args: {args} and kwargs: {kwargs}")\n \n    def my_keyword(self, *args, **kwargs):\n        print(f"Keyword got args: {args} and kwargs: {kwargs}")\n        return "Hello World"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-robotframework"},"*** Settings ***\nLibrary    DemoLibrary.py\n\n*** Test Cases ***\nUse a Keyword with multiple arguments\n    My Keyword    Argument 1    Argument 2    Named Argument=One Value\n")),(0,o.kt)("h3",{id:"static-library-withouth-a-class"},"Static Library withouth a Class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import base64\n\ndef encode_as_base64(string):\n    """\n    Encode string as base64.\n    """\n    return base64.b64encode(string.encode())\n\ndef decode_from_base64(string):\n    """\n    Decode string from base64.\n    """\n    return base64.b64decode(string).decode()\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-robotframework"},"*** Settings ***\nLibrary    LibraryWithoutClass.py\n\n*** Test Cases ***\nUse Custom Keywords\n    ${base64}    Encode As Base64    This is a Test String\n    Log    ${base64}\n    ${decoded}    Decode From Base64    ${base64}\n    Log    ${decoded}\n")),(0,o.kt)("h2",{id:"decorators"},"Decorators"),(0,o.kt)("p",null,"You can add decorators like ",(0,o.kt)("inlineCode",{parentName:"p"},"@keyword")," ",(0,o.kt)("inlineCode",{parentName:"p"},"@not_keyword")," to mark your functions as keywords and e.g. provide another name for the keyword."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from robot.api.deco import keyword, not_keyword\n\n\n@keyword('Login via user panel')\ndef login(username, password):\n      # ...\n\n@not_keyword\ndef this_is_not_keyword():\n    pass\n")),(0,o.kt)("p",null,"It can even be used to add tags or change the argument conversion."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from robot.api.deco import keyword\n\n\n@keyword(tags=['tag1', 'tag2'])\ndef login(username, password):\n    # ...\n\n@keyword('Custom name', ['tags', 'here'])\ndef another_example():\n    # ...\n\n@keyword(types={'count': int, 'case_insensitive': bool})\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n\n@keyword(types=[int, bool])\ndef example_keyword(count, case_insensitive=True):\n    if case_insensitive:\n        # ...\n")),(0,o.kt)("p",null,"A simple ",(0,o.kt)("inlineCode",{parentName:"p"},"Calculate.py")," library with a single keyword that calculates a mathematical expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def calculate(term):\n    if term == "":\n        return 0\n    else:\n        return eval(term)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-robotframework"},"*** Settings ***\nLibrary    Calculate.py\n\n*** Test Cases ***\nPerform Calculations\n    ${result}    Calculate    1 + 2\n    Should Be Equal As Numbers    ${result}    3\n    ${result}    Calculate    10 * 5\n    Should Be Equal As Numbers    ${result}    50\n    ${result}    Calculate    8 / 4\n    Should Be Equal As Numbers    ${result}    2\n    ${result}    Calculate    2 - 1\n    Should Be Equal As Numbers    ${result}    1\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("iframe",{src:"https://robotframework.org/code/?codeProject=N4IgdghgtgpiBcIDCBXAzgFwPZRAGhABMY0BjAJwEsAHDSrMBEfEAM0oBsSEBtUdrgDlocRABUSGAMopKGGADpyWAEZYMLUg3lgNiAFSGABFJgY6YAOZojh-QB0wAGUoryEcgE8jPowAVPDAALBgBpGE8AdyxyQjRHRzsjCUwjJAg0EltDRwBVTLT0bCgjcKiYuMdfI0EsIwBBcksUWF14sGqAeTAYBqaWmF1qlIw+5taMKt8xIPIYXsbxwYwbX27e6ejh2fmpn3WjABEYVggUDlHfPaMAWXO6ai4jk7OL1Z9FgaGARmqPSwAzABeT4TIwA643bxlaKxaqg5ZGX6+BFDABM1WEsEIYy+GCBBwAahAOCg4ABfPD8TgwLGiEAAawisLiShIWBQ5FIcAIWl0yyYRhAlOpQhETAAbh5KBAVFw0Gy0ByuTyQHydHoQEKRWwaXSmAFgmFmRUFdRPJptALEKQOBkbIaQmAYab4NdiKwjAB9L2UMByH0ACkyHFYeFs-zQ4cMDMikYAlG6OtVfNQqLpA6x7CApNBHr0XG4PN4-XIZRxKAAvGA4yJyIJGSPwIzASPkxtgHGxpst7tNNDk7Pxqruk5GMBYL3-PFoYMwUOJ67VNN+jCB7MuuGWdTjurTiYKocJZM+D1GBgwKf9CZz0Ph-6Lk8plcZjcmrc7i+N6+IgDkAFI0F-BRsyMf9v0sYcwFHT1gjmS992WWcQzDRtvnvNF7wBR8U1TdM1zfcoP1GOD5ggmcjAAoDwyo38OxxWiQK1cDAwgdDG0wxtsKgmDzx6L0PVeNcUPvJogV-QT7l-HDcKMF8CJAVFRiCDIjClUlekA0DwIfY9qjPKB7hoLgBJee5kPnVD-nY-40XEySLiRX9RMBeyzMctFpKTWS5Pw9cQAAcR3RC2jAqMwvosLtKMVimhsppOP+bil14qBPC9JkiMIW9UP0SNo30PtrBk3D5MzQiWSMbdRh7Vt+3bCBOyMIq0GbYAWsHEAoJ8uYME5DpswACXnDg6gAdRiDhCGzYUqV1MVYANQInWJKhZXlBRzUtfldEFYUAF0CGIKgJRrPxlAAKxgUg9AwcgyQIZQ1AwQkYHINB6EYRAAFYFAABgUb5hSAA",width:"100%",height:"600"}))}m.isMDXComponent=!0}}]);