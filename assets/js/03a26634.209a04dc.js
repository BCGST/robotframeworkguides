"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[273],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),c=a,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||s;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var u=2;u<s;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4581:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return c},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return m}});var r=n(7462),a=n(3366),s=(n(7294),n(3905)),o=["components"],i={sidebar_label:"Parsing Test Results",title:"Parsing Test Results"},l=void 0,u={unversionedId:"parsing_results",id:"parsing_results",title:"Parsing Test Results",description:"Robot Framework can create different output files after a test run.",source:"@site/docs/parsing_results.md",sourceDirName:".",slug:"/parsing_results",permalink:"/parsing_results",editUrl:"https://github.com/MarketSquare/robotframeworkguides/docs/parsing_results.md",tags:[],version:"current",frontMatter:{sidebar_label:"Parsing Test Results",title:"Parsing Test Results"},sidebar:"tutorialSidebar",previous:{title:"Dealing with flaky tests",permalink:"/flaky_tests"},next:{title:"Create And Release RF Libraries",permalink:"/releasing_your_own_libraries"}},p={},m=[{value:"Reading results using the RF API",id:"reading-results-using-the-rf-api",level:2},{value:"Getting result statistics",id:"getting-result-statistics",level:2},{value:"Robot Framework Report",id:"robot-framework-report",level:3},{value:"More information",id:"more-information",level:3}],d={toc:m};function c(e){var t=e.components,n=(0,a.Z)(e,o);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Robot Framework can create different output files after a test run.  "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"output.xml")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"log.html")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"report.html")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"xunit.xml"))),(0,s.kt)("p",null,"Sometimes you want to parse your test results, e.g. because you want to transfer them to a different system (like a test management tool)."),(0,s.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"Don't try to parse the .xml files using some python xml module."))),(0,s.kt)("p",null,"Instead, use the ",(0,s.kt)("strong",{parentName:"p"},"Robot Framework API")," which allows you to get details about the executed tests, keywords, their data and the results much easier.",(0,s.kt)("br",{parentName:"p"}),"\n","You can find the documentation for the results model ",(0,s.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/stable/autodoc/robot.result.html?highlight=Resultvisitor#"},"here"),".\nEspecially the ",(0,s.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/stable/autodoc/robot.result.html?highlight=Resultvisitor%20#module-robot.result.visitor"},"ResultVisitor")," will allow you to access and modify your results at different points in time, e.g. when "),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"a test suite starts/ends"),(0,s.kt)("li",{parentName:"ul"},"a test case starts/ends"),(0,s.kt)("li",{parentName:"ul"},"a keyword starts/ends"),(0,s.kt)("li",{parentName:"ul"},"...  ")),(0,s.kt)("p",null,"Check the ",(0,s.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/stable/autodoc/robot.result.html?highlight=Resultvisitor%20#module-robot.result.visitor"},"documentation")," for more possible entry points.",(0,s.kt)("br",{parentName:"p"}),"\n","While visiting the results, you will have full access to the Robot Framework ",(0,s.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/stable/autodoc/robot.model.html#module-robot.model"},"Model")," and its objects.\nYou can easily read the status of a test or keyword, read its arguments or the elapsed execution time. Basically all data which is written into the ",(0,s.kt)("inlineCode",{parentName:"p"},"output.xml")," can be accessed via the model.  "),(0,s.kt)("h2",{id:"reading-results-using-the-rf-api"},"Reading results using the RF API"),(0,s.kt)("p",null,"Example which reads the execution time per test and sets the test status to failed,  in case the execution took longer than a defined value ",(0,s.kt)("inlineCode",{parentName:"p"},"max_seconds"),"."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"ExecutionTimeChecker.py"),"  "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"import sys\nfrom robot.api import ExecutionResult, ResultVisitor\n\n\nclass ExecutionTimeChecker(ResultVisitor):\n\n    def __init__(self, max_seconds):\n        self.max_milliseconds = max_seconds * 1000\n\n    def visit_test(self, test):\n        if test.status == 'PASS' and test.elapsedtime > self.max_milliseconds:\n            test.status = 'FAIL'\n            test.message = 'Test execution took too long.'\n\n\ndef check_tests(seconds, inpath, outpath=None):\n    result = ExecutionResult(inpath)\n    result.visit(ExecutionTimeChecker(float(seconds)))\n    result.save(outpath)\n\n\nif __name__ == '__main__':\n    try:\n        check_tests(*sys.argv[1:])\n    except TypeError:\n        print(__doc__)\n")),(0,s.kt)("p",null,"You can run the script from the terminal as shown below:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-shell"},"python ExecutionTimeChecker.py 10 output.xml checked_output.xml\n")),(0,s.kt)("h2",{id:"getting-result-statistics"},"Getting result statistics"),(0,s.kt)("p",null,"Simple example to read number of passed and failed tests"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from robot.api import ExecutionResult\nresult = ExecutionResult(\'output.xml\')\nstats = result.statistics\nprint(f"Number of Failed Tests: {stats.failed}")\nprint(f"Total number of Tests: {stats.passed}")\n')),(0,s.kt)("p",null,"You can also create a table in a markdown file ",(0,s.kt)("inlineCode",{parentName:"p"},"report.md"),"with the results."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from robot.api import ExecutionResult, ResultVisitor\nimport sys\n\nclass MyResultVisitor(ResultVisitor):\n    def __init__(self, markdown_file=\'report.md\'):\n        self.failed_tests = []\n        self.passed_tests = []\n        self.markdown_file = markdown_file\n\n    def visit_test(self, test):\n        if test.status == \'FAIL\':\n            self.failed_tests.append(test.name)\n        elif test.status == \'PASS\':\n            self.passed_tests.append(test.name)\n\n    def end_result(self, result):\n        # Create a new markdown file\n        with open(self.markdown_file, "w") as f:\n            f.write("# Robot Framework Report\\n")\n            f.write("|Test|Status|\\n")\n            f.write("|---|---|\\n")\n            for test in self.passed_tests:\n                f.write(f"|{test}|PASS|\\n")\n            for test in self.failed_tests:\n                f.write(f"|{test}|FAIL|\\n")\n                \nif __name__ == \'__main__\':\n    try:\n        output_file = sys.argv[1]\n    except IndexError:\n        output_file = "output.xml"\n    try:\n        markdown_file = sys.argv[2]\n    except IndexError:\n        markdown_file = "report.md"\n    result = ExecutionResult(output_file)\n    result.visit(MyResultVisitor())\n')),(0,s.kt)("p",null,"That's how the result will look like:"),(0,s.kt)("h3",{id:"robot-framework-report"},"Robot Framework Report"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Test"),(0,s.kt)("th",{parentName:"tr",align:null},"Status"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"My First Test Case"),(0,s.kt)("td",{parentName:"tr",align:null},"PASS")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"My Second Test Case As Keyword"),(0,s.kt)("td",{parentName:"tr",align:null},"PASS")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"Some Other Test Case"),(0,s.kt)("td",{parentName:"tr",align:null},"PASS")),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"A Failed Test Case"),(0,s.kt)("td",{parentName:"tr",align:null},"FAIL")))),(0,s.kt)("h3",{id:"more-information"},"More information"),(0,s.kt)("p",null,"Check the ",(0,s.kt)("a",{parentName:"p",href:"https://robot-framework.readthedocs.io/en/stable/autodoc/robot.result.html?highlight=Resultvisitor%20#module-robot.result.visitor"},"documentation")))}c.isMDXComponent=!0}}]);